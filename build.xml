<?xml version="1.0" encoding="UTF-8"?>
<project 
	default	= "init" 
	basedir	= "." 
	name	= "admaDIC Calculator"
>
	<description>
Calculator Application for admaDIC GbR
	</description>

	<property file="${basedir}/build.version.properties" />
	<property file="${basedir}/build.default.properties" />

	<path id="classpath.main">
		<pathelement location="${build.main.dir}" />
		<pathelement location="${lib.junit4.jar}" />
		<pathelement location="${lib.forms.jar}" />
		<pathelement location="${lib.skinlf.jar}" />
		<pathelement location="${lib.nanoxml.jar}" />
		<pathelement location="${lib.mesp.jar}" />
	</path>

	<path id="classpath.tests">
		<pathelement location="${build.main.dir}" 	/>
		<pathelement location="${build.test.dir}" />
		<pathelement location="${lib.junit4.jar}" />
		<pathelement location="${lib.forms.jar}" />
		<pathelement location="${lib.skinlf.jar}" />
		<pathelement location="${lib.nanoxml.jar}" />
		<pathelement location="${lib.mesp.jar}" />
	</path>

	<target name="clean">
		<delete dir="${build.dir}" />
	</target>

	<target name="clean.dist">
		<delete dir="${dist.root.dir}" />
	</target>

	<target name="clean.version">
		<delete file="${version.java.file}" />
	</target>

	<target 
		name="all"
		depends="init,init.version,compile,dist.jar" 
	>
	</target>

	<target name="init" description="Initialize build process">
		<tstamp>
			<!-- <format property="DATE" pattern="yyyy-MM-dd hh:mm:ss" /> -->
		</tstamp>

		<mkdir dir="${build.main.dir}" />
		<mkdir dir="${build.test.dir}" />
		<mkdir dir="${build.reports.dir}"/>
		<mkdir dir="${dist.dir}" />

		<available
			property="junit.task.present"
			classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"
		/>
		<available
			property="junit.jar.present"
			file="${lib.junit4.jar}"
		/>
	</target>

	<target 
		name="init.version"
	>
		<!-- initialize version! -->
		<copy file="${version.tmpl.file}" tofile="${version.java.file}"/>

		<replace 
			file="${version.java.file}" 
			summary="yes"
		>
			<replacefilter token="@version@" value="${info.version}" />
			<replacefilter token="@versionFS@" value="${impl.dotted.version}" />
			<replacefilter token="@versionLC@" value="${impl.dotted.version}" />
		</replace>
	</target>

	<target 
		name="compile" 
		depends="init,init.version,compile.main,compile.tests" 
		description="Compiles the project"
	>
	</target>

	<target 
		name="compile.main" 
		depends="init,init.version"
		description="Compiles the main sources of the project"
	>
		<javac 
			debug		 ="${javac.debug}"
			destdir      ="${build.main.dir}"
			classpathref ="classpath.main"
		>
			<!--			srcdir       ="${src.main.dir}" -->
			<src path="${src.main.dir}/main"/>
			<src path="${src.main.dir}/calccorelib"/>
			<src path="${src.main.dir}/calcmod-indxp"/>
			<src path="${src.main.dir}/calcmod-masca"/>
			<src path="${src.main.dir}/calcmod-matrx"/>
			<src path="${src.main.dir}/gmx"/>
			<src path="${src.main.dir}/lib"/>
			<src path="${src.main.dir}/units"/>
		</javac>
		<copy todir="${build.main.dir}">
			<fileset dir="${src.res.dir}">
				<exclude name="**/.svn" />
				<exclude name="**/*.java" />
				<exclude name="**/*.tmpl" />
			</fileset>
		</copy>
		<copy todir="${build.main.dir}/cfg">
			<fileset dir="${src.cfg.dir}">
				<exclude name="**/.svn" />
			</fileset>
		</copy>
		<copy todir="${build.main.dir}/laf">
			<fileset dir="${src.laf.dir}">
				<exclude name="**/.svn" />
				<exclude name="**/*.jar" />
			</fileset>
		</copy>
		<!-- don't include the xml files from the units module itself -->
		<!--
		<copy todir="${build.main.dir}">
			<fileset dir="${src.main.dir}/units">
				<include name="**/*.xml" />
				<exclude name="**/*-manual.xml" />
				<exclude name="**/*-save.xml" />
			</fileset>
		</copy>
		-->
		<copy todir="${build.main.dir}">
			<fileset dir="${src.main.dir}/calcmod-masca">
				<include name="**/*.xml" />
				<include name="**/*.png" />
			</fileset>
		</copy>
		<copy todir="${build.main.dir}">
			<fileset dir="${src.main.dir}/calcmod-indxp">
				<include name="**/*.xml" />
				<include name="**/*.png" />
			</fileset>
		</copy>
		<copy todir="${build.main.dir}">
			<fileset dir="${src.main.dir}/calcmod-matrx">
				<include name="**/*.xml" />
				<include name="**/*.png" />
			</fileset>
		</copy>
	</target>

	<target 
		name="compile.tests" 
		depends="init,init.version"
		if="junit.jar.present"
		description="Compiles the unit tests."
	>
		<javac 
			debug		= "${javac.debug}"
			destdir      ="${build.test.dir}"
			classpathref ="classpath.tests" 
		>
			<!--			srcdir       ="${src.test.dir}" -->
			<src path="${src.test.dir}/main"/>
			<src path="${src.test.dir}/calccorelib"/>
<!--			<src path="${src.test.dir}/calcmod-indxp"/>-->
<!--			<src path="${src.test.dir}/calcmod-masca"/>-->
<!--			<src path="${src.test.dir}/calcmod-matrx"/>-->
			<src path="${src.test.dir}/gmx"/>
			<src path="${src.test.dir}/lib"/>
			<src path="${src.test.dir}/units"/>
		</javac>
	</target>	

	<target 
		name="test" 
		depends="compile.tests" 
		if="junit.task.present"
		description="Compiles and runs the unit tests."
	>
		<junit
			printsummary="yes"
			haltonfailure="no"
		>
			<classpath refid="classpath.tests"/>
			<formatter type="plain" />
			<batchtest fork="yes" todir="${build.reports.dir}">
				<fileset
					dir="${src.test.dir}"
					includes="**/*Test.java"
				/>
			</batchtest>
		</junit>
	</target>

	<target
		name="dist.jar.bare"
		depends="compile"
		description="Creates the distribution files"
	>
		<jar 
			destfile="${dist.main.jar}" 
		>
			<fileset dir="${build.main.dir}/">
			</fileset>
			<manifest>
				<attribute name="Built-By" value="Rainer Schwarze"/>
				<attribute name="Main-Class" value="${main.class}"/>
			</manifest>
		</jar>
	</target>


	<target
			name="dist.jar"
			depends="compile"
			description="Creates the distribution files"
	>
		<!-- create a class path with all redistributable jars from lib: -->
		<jar
				destfile="${dist.main.jar}"
		>
			<fileset dir="${build.main.dir}/" includes="**/*">
			</fileset>
			<zipfileset src="${lib.forms.jar}" />
			<zipfileset src="${lib.mesp.jar}" />
			<zipfileset src="${lib.nanoxml.jar}" />
			<zipfileset src="${lib.skinlf.jar}" />

			<manifest>
				<attribute name="Built-By" value="Rainer Schwarze"/>
				<attribute name="Main-Class" value="${main.class}"/>
			</manifest>
		</jar>
	</target>
</project>
